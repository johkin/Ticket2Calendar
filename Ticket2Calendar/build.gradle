buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath 'com.android.tools.build:gradle:0.4.2'
	}
}
apply plugin: 'android'

//sourceSets {
//    localTest {
//        java.srcDir file('src/test/java')
//        resources.srcDir file('src/test/resources')
//    }
//}

repositories {
    mavenCentral()
}

//configurations {
//    localTest {
//        extendsFrom compile
//    }
//}

dependencies {
	compile files('libs/libGoogleAnalyticsV2.jar')
}

android {
	compileSdkVersion 17
    buildToolsVersion "17.0.0"


	defaultConfig {
        versionCode = 133
        versionName = '1.3.3'
    }

    signingConfigs {
        releaseConfig {
            storeFile file("../market-publisher-key")
            keyAlias "acrend"
        }
    }
	
	buildTypes {
		debug {
			packageNameSuffix = ".debug"
			buildConfig "private final static boolean STAGING = false;"
		}
		release {
			buildConfig "private final static boolean STAGING = false;"
            signingConfig signingConfigs.releaseConfig
		}
	}

    if (project.hasProperty('storePassword') &&
            project.hasProperty('keyPassword')) {
        android.signingConfigs.releaseConfig.storePassword = storePassword
        android.signingConfigs.releaseConfig.keyPassword = keyPassword
    } else {
        buildTypes.release.signingConfig = null
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

//task localTest(type: Test, dependsOn: assemble) {
//    testClassesDir = sourceSets.localTest.output.classesDir
//
////    sourceSets.localTest.compileClasspath += files("$buildDir/classes/debug")
////    sourceSets.localTest.runtimeClasspath += files("$buildDir/classes/debug")
//    sourceSets.localTest.compileClasspath += android.sourceSets.debug.output.dirs
//    sourceSets.localTest.runtimeClasspath += android.sourceSets.debug.output.dirs
//
//    classpath = android.sourceSets.localTest.runtimeClasspath
//}
//
//check.dependsOn localTest